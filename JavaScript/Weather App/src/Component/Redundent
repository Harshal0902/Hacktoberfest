
// d686bdf012cea1b3b4050adf53dfdb64
{
  /* <Geolocation
render={({
  fetchingPosition,
  position: { lon: { latitude, longitude } = {} } = {},
  error,
  getCurrentPosition,
}) => (
  <div>
    <button onClick={getCurrentPosition}>Get Position</button>
    {error && <div>{error.message}</div>}
    <pre>
      latitude: {setLat(latitude)}
      longitude: {setLon(longitude)}
    </pre>
  </div>
)}
/> */
}
// const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=d686bdf012cea1b3b4050adf53dfdb64`;
// setLocation(resJson.main.temp);
// setName(resJson.name);
// setWeather(resJson.weather[0].main);
// setLon(resJson.coord.lon);
// setLat(resJson.coord.lat);
{
  /* <div>
 <input
  type="search"
  onChange={(e) => {
    setCity(e.target.value);
  }}
  placeholder="search location"
/> 
</div> */
}
// const url = `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=d686bdf012cea1b3b4050adf53dfdb64`;

// d686bdf012cea1b3b4050adf53dfdb64
{
  /* <Geolocation
render={({
  fetchingPosition,
  position: { lon: { latitude, longitude } = {} } = {},
  error,
  getCurrentPosition,
}) => (
  <div>
    <button onClick={getCurrentPosition}>Get Position</button>
    {error && <div>{error.message}</div>}
    <pre>
      latitude: {setLat(latitude)}
      longitude: {setLon(longitude)}
    </pre>
  </div>
)}
/> */
}
// const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=d686bdf012cea1b3b4050adf53dfdb64`;
// setLocation(resJson.main.temp);
// setName(resJson.name);
// setWeather(resJson.weather[0].main);
// setLon(resJson.coord.lon);
// setLat(resJson.coord.lat);
{
  /* <div>
 <input
  type="search"
  onChange={(e) => {
    setCity(e.target.value);
  }}
  placeholder="search location"
/> 
</div> */
}
// const url = `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=d686bdf012cea1b3b4050adf53dfdb64`;

// let myurl;
// if (!location) {
//   myurl = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=d686bdf012cea1b3b4050adf53dfdb64`;
// } else {
//   myurl = `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=d686bdf012cea1b3b4050adf53dfdb64`;
// }
// {
//   console.log(myurl);
// }
// useEffect(() => {
//   const fetchApi = async () => {
//     const url = myurl;
//     const response = await fetch(url);
//     const resJson = await response.json();
//     setLocation(resJson.main);

//     console.log(resJson);
//   };
//   fetchApi();
// }, [city, lat, lon]);

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
import React, { useState, useEffect } from "react";
import Geoloc from "./Geolocation";
import "./Weather.css";
function Weather() {
  const [location, setLocation] = useState(null);
  const [city, setCity] = useState("patna");
  const [geolocation, setGeolocation] = useState(false);

  const geoHandler = () => {
    setGeolocation(<Geoloc />);
  };
  useEffect(() => {
    const fetchApi = async () => {
      const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=d686bdf012cea1b3b4050adf53dfdb64`;
      const response = await fetch(url);
      const resJson = await response.json();

      setLocation(resJson.main);

      console.log(resJson);
    };
    fetchApi();
  }, [city]);

  return (
    <div>
      <input
        value={city}
        type="search"
        onChange={(e) => {
          setCity(e.target.value);
        }}
        placeholder="search location"
      />

      {!location ? (
        <p>no data found </p>
      ) : (
        <div>
          <div>Location: {city}</div>
          <div>Tempreature: {location.temp} 째C</div>
          <div>Feels Like: {location.feels_like}째C</div>
          <div>Pressure: {location.pressure / 100} Pa</div>
        </div>
      )}
      <div>
        {geolocation}
        <button onClick={geoHandler}>geoloc</button>
      </div>
    </div>
  );
}

export default Weather;
{/* <input
placeholder="Search City"
type="text"
class="form-control"
aria-label="Dollar amount (with dot and two decimal places)"
/> */}

function Html() {
  const weatherIcon = {
    Thunderstorm: "wi wi-thunderstorm display-1",
    Drizzle: "wi wi-sleet",
    Rain: "wi wi-storm-showers",
    Snow: "wi wi-snow",
    Atmosphere: "wi wi-fog",
    Clear: "wi wi-day-sunny",
    Clouds: "wi wi-day-fog",
  };

  // const Api = useEffect(() => {
//   const fetchApi = async () => {
//     const api = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=d686bdf012cea1b3b4050adf53dfdb64`;
//     const res = await fetch(api);
//     const rep = await res.json();
//     // setLocation(rep.main);
//     // setCountry(rep.sys.country);
//     // setWeather(rep.weather[0].description);
//     // setSunrise(rep.sys.sunrise);
//     // setSunset(rep.sys.sunset);
//     console.log(rep);
//   };
//   fetchApi();
// }, [lat, lon]);

//   <Geolocation
//   render={({
//     fetchingPosition,
//     position: { coords: { latitude, longitude } = {} } = {},
//     error,
//     getCurrentPosition,
//   }) => (
//     <div>
//       {error && <div>{error.message}</div>}
//       <pre>
//         {setLat(`${latitude}`)}
//         {setLon(`${longitude}`)}
//       </pre>
//     </div>
//   )}
// />


import React, { useState, useEffect } from "react";

function Weather() {
  const [location, setLocation] = useState(null);
  const [city, setCity] = useState("new delhi");

  useEffect(() => {
    const fetchApi = async () => {
      const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=d686bdf012cea1b3b4050adf53dfdb64`;
      const response = await fetch(url);
      const resJson = await response.json();
      setLocation(resJson.main);

      console.log(resJson);
    };
    fetchApi();
  }, [city]);

  return (
    <div>
      <input
        value={city}
        type="search"
        onChange={(e) => {
          setCity(e.target.value);
        }}
        placeholder="search location"
      />

      {!location ? (
        <p>no data found </p>
      ) : (
        <div>
          <div>Location: {city}</div>
          <div>Tempreature: {location.temp} 째C</div>
          <div>Feels Like: {location.feels_like}째C</div>
          <div>Pressure: {location.pressure / 100} Pa</div>
        </div>
      )}
    </div>
  );
}

export default Weather;
